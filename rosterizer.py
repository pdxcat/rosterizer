#!/usr/bin/python

from sys import exit
from datetime import datetime
from csv import reader
from redmine import Redmine
from redmine.exceptions import ValidationError, ForbiddenError
import yaml


# Configuration
with open('secrets.yaml') as f:
    secret = yaml.load(f.read())

chronicle = Redmine(secret['host'], key=secret['api_key'])
project = secret['project']

with open('config.yaml') as f:
    config = yaml.load(f.read())

year = datetime.now().year
roster_title = "{0}-{1} Roster".format(year, year+1)
roster_text = "h1. {0}-{1} Roster\n\n".format(year, year+1)
zombie_file = config['zombie_file']
zombie_text = config['zombie_text']
roster_line = config['roster_line']

# Load all the zombies

print("Loading zombies from {0}.".format(zombie_file))
zombies = []
try:
    with open(zombie_file) as zombie_data:
        for zombie in reader(zombie_data):
            zombies.append(tuple(zombie))
except IOError as e:
    print("\nUnable to populate zombies! ({0}) Stopping.".format(str(e)))
    exit(1)


# Create roster page

print
print("Creating the roster page ({0}).".format(roster_title)),
try:
    chronicle.wiki_page.create(project_id=project, title=roster_title, text=roster_text, parent_title="Braindump", comments="Autogenerated by Rosterizer")
except (ValidationError, ForbiddenError) as e:
    print("\nCannot create roster ({0})! Stopping.".format(str(e)))
    exit(2)


# Create zombie pages

print
print("Creating zombie pages and generating roster text.")
zombie_errors = []
for name, username, image_file in zombies:
    roster_text += roster_line.format(name=name, username=username, image_file=image_file, host=host)
    try:
        chronicle.wiki_page.create(project_id=project, title=username, text=zombie_text.format(name=name, image_file=image_file), parent_title=roster_title, comments="Autogenerated by Rosterizer")
    except ValidationError as e:
        print("Couldn't create page for {0} ({1}). Skipping.".format(name, str(e)))
        zombie_errors.append((name, username, image_file))
    else:
        print("Created page for {0} ({1}).".format(name, username))
if zombie_errors:
    print
    print("These zombie pages couldn't be created automatically:")
    print("\n".join(map(" / ".join, zombie_errors)))

print
print("Replacing roster text with generated text.")
try:
    chronicle.wiki_page.update(roster_title, project_id=project, text=roster_text)
except ValidationError as e:
    print ("\nCannot update roster page ({0}). Stopping.".format(str(e)))
    exit(3)

print
print("Done! {host}/projects/{project}/wiki/{roster_title}".format(host=host, project=project, roster_title=roster_title.replace(" ", "_")))
